# 🎯 Affiliate System Documentation

## 📋 Complete System Overview

### What is the Affiliate System?
- **Partners** register and get unique referral codes
- **Customers** use referral codes to get **10% discount** for first 3 months
- **Partners** earn **20% commission** on every payment made by referred customers
- All commission tracking happens automatically via **Stripe Webhooks**

---

## 🔄 Complete Affiliate Flow

### Step 1: Partner Registration
```
Partner signs up → System creates partnerId → Generates referral code
```

### Step 2: Customer Uses Referral Code
```
Customer registers with referralCode → System creates:
- Stripe Customer ID
- Stripe Coupon (10% off, 3 months)
- Stripe Promotion Code (PLUS5-customerId)
- Database mapping between partner and customer
```

### Step 3: Customer Makes Payment
```
Customer pays → Stripe webhook fires → System calculates 20% commission → Credits to partner
```

---

## 🛠️ Technical Implementation

### Database Schema Changes

#### Referral Table Structure:
```sql
model Referral {
  id                    String   @id @default(cuid())
  status               String   @default("pending") // pending, active, cancelled
  commission           Float    @default(0)
  totalCommissionEarned Float    @default(0)
  date                 DateTime @default(now())
  
  // Stripe integration fields
  stripeCouponId       String?  // Stripe coupon ID
  stripePromotionCodeId String? // Stripe promotion code ID  
  promotionCode        String?  // The actual promotion code (e.g., PLUS5-partnerId)
  
  // Commission tracking
  invoicesPaid         Int      @default(0)
  lastCommissionDate   DateTime?
  
  // Relations
  referrerId     String
  referrer       User     @relation("Referrer", fields: [referrerId], references: [id])
  referredUserId String
  referredUser   User     @relation("ReferredUser", fields: [referredUserId], references: [id])
}
```

### Key API Endpoints

#### 1. User Registration with Referral
```http
POST /api/auth/register
Content-Type: application/json

{
  "email": "customer@example.com",
  "password": "password123",
  "firstName": "John",
  "lastName": "Doe",
  "referralCode": "PLUSFIVE2025HHTMMH"
}
```

**Response when referral code is used:**
```json
{
  "success": true,
  "message": "User registered successfully",
  "data": {
    "user": {
      "id": "user123",
      "email": "customer@example.com",
      "stripeCustomerId": "cus_stripe123"
    },
    "discount": {
      "promotionCode": "PLUS5-user123",
      "discount": "10% off for 3 months",
      "message": "Use this code at checkout for discount"
    }
  }
}
```

#### 2. Get Referral Details
```http
GET /api/referrals
Authorization: Bearer <token>
```

**Response:**
```json
{
  "success": true,
  "data": {
    "myReferrals": [
      {
        "id": "ref123",
        "promotionCode": "PLUS5-user123",
        "commission": 25.50,
        "totalCommissionEarned": 125.75,
        "invoicesPaid": 5,
        "referredUser": {
          "email": "customer@example.com",
          "firstName": "John"
        }
      }
    ],
    "totalCommission": 125.75
  }
}
```

---

## ⚙️ Stripe Configuration

### Required Environment Variables
```env
STRIPE_SECRET_KEY=sk_test_...
STRIPE_PUBLISHABLE_KEY=pk_test_...
STRIPE_WEBHOOK_SECRET=whsec_...
```

### Webhook Events to Configure
```
customer.created
customer.updated
customer.subscription.created
customer.subscription.updated
customer.subscription.deleted
invoice.paid
```

### Webhook Endpoint URL
```
https://yourdomain.com/api/stripe/webhook
```

---

## 🧪 Testing the System

### Test Scenario 1: Complete Affiliate Flow

1. **Register Partner:**
```bash
curl -X POST http://localhost:3000/api/auth/register \
  -H "Content-Type: application/json" \
  -d '{
    "email": "partner@test.com",
    "password": "password123",
    "firstName": "Partner",
    "lastName": "User"
  }'
```

2. **Get Partner's Referral Code:**
```bash
# From response, note the referralCode: "PLUSFIVE2025XXXXXX"
```

3. **Register Customer with Referral Code:**
```bash
curl -X POST http://localhost:3000/api/auth/register \
  -H "Content-Type: application/json" \
  -d '{
    "email": "customer@test.com",
    "password": "password123",
    "firstName": "Customer",
    "lastName": "User",
    "referralCode": "PLUSFIVE2025XXXXXX"
  }'
```

4. **Check Response for Promotion Code:**
```json
{
  "discount": {
    "promotionCode": "PLUS5-customerUserId",
    "discount": "10% off for 3 months"
  }
}
```

5. **Customer Uses Promotion Code in Stripe Checkout:**
```javascript
// Frontend code for applying promotion code
const session = await stripe.redirectToCheckout({
  sessionId: 'session_id',
  promotionCode: 'PLUS5-customerUserId'
});
```

6. **Verify Commission:**
```bash
# Check webhook logs for commission calculation
# Check referral table for updated commission amounts
```

---

## 🔧 Key Functions

### Stripe Integration Functions

#### Create Affiliate Coupon
```javascript
const createAffiliateCoupon = async (partnerId) => {
  const coupon = await stripe.coupons.create({
    percent_off: 10,
    duration: 'repeating',
    duration_in_months: 3,
    name: '10% Referral Discount',
    metadata: {
      partnerId: partnerId,
      type: 'affiliate'
    }
  });
  return coupon;
};
```

#### Create Promotion Code
```javascript
const createAffiliatePromotionCode = async (couponId, partnerId) => {
  const promotionCode = await stripe.promotionCodes.create({
    coupon: couponId,
    code: `PLUS5-${partnerId}`,
    active: true,
    metadata: {
      partnerId: partnerId,
      type: 'affiliate'
    }
  });
  return promotionCode;
};
```

#### Calculate Commission
```javascript
const calculateCommissionFromInvoice = async (invoiceId) => {
  const invoice = await stripe.invoices.retrieve(invoiceId, {
    expand: ['discount.promotion_code']
  });
  
  if (invoice.discount?.promotion_code?.metadata?.partnerId) {
    const commissionRate = 0.20; // 20%
    const commissionAmount = (invoice.amount_paid || 0) * commissionRate / 100;
    
    return {
      partnerId: invoice.discount.promotion_code.metadata.partnerId,
      commissionAmount,
      invoiceId: invoice.id
    };
  }
  
  return null;
};
```

---

## 🚀 How Customer Uses the System

### Frontend Implementation for Customer Checkout

```javascript
// 1. Customer gets promotion code from registration response
const promotionCode = "PLUS5-user123";

// 2. Apply promotion code during Stripe checkout
const { data } = await fetch('/api/stripe/create-checkout-session', {
  method: 'POST',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify({
    priceId: 'price_monthly_plan',
    promotionCode: promotionCode // Apply discount
  })
});

// 3. Redirect to Stripe checkout
window.location.href = data.url;
```

### Backend Checkout Session Creation
```javascript
app.post('/api/stripe/create-checkout-session', async (req, res) => {
  const { priceId, promotionCode } = req.body;
  
  const sessionConfig = {
    mode: 'subscription',
    line_items: [{
      price: priceId,
      quantity: 1,
    }],
    success_url: 'https://yoursite.com/success',
    cancel_url: 'https://yoursite.com/cancel',
  };
  
  // Apply promotion code if provided
  if (promotionCode) {
    sessionConfig.discounts = [{
      promotion_code: promotionCode
    }];
  }
  
  const session = await stripe.checkout.sessions.create(sessionConfig);
  res.json({ url: session.url });
});
```

---

## 📊 Commission Tracking

### How Commission is Calculated

1. **Invoice Paid Event:** Stripe sends webhook when customer pays
2. **Check Promotion Code:** System checks if discount was applied
3. **Find Partner:** Get partnerId from promotion code metadata
4. **Calculate Commission:** 20% of invoice amount
5. **Update Database:** Add commission to partner's total

### Commission Flow Example
```
Customer pays $100 → 20% commission = $20 → Partner earns $20
Customer pays $50 → 20% commission = $10 → Partner earns $10
Total Partner Commission = $30
```

---

## 🔍 Troubleshooting

### Common Issues

1. **Referral Code Not Working:**
   - Check if referralCode is being sent in request body
   - Verify referrer exists in database
   - Check Stripe API keys are correct

2. **Promotion Code Not Generated:**
   - Check Stripe webhook secret is correct
   - Verify Stripe API is accessible
   - Check server logs for Stripe errors

3. **Commission Not Calculated:**
   - Verify webhook events are configured correctly
   - Check invoice.paid webhook is firing
   - Ensure promotion code metadata contains partnerId

### Debug Commands
```bash
# Check referral records
npx prisma studio

# Check server logs
npm run dev

# Test webhook locally
# Use ngrok or serveo for public URL
```

---

## 📈 Future Enhancements

1. **Partner Dashboard:** Show commission history and referral stats
2. **Commission Payouts:** Automated payment to partners
3. **Multi-tier Commissions:** Different rates for different products
4. **Analytics:** Detailed referral and conversion tracking

---

## 🎯 Summary

**What Works:**
✅ Partner registration with referral codes  
✅ Customer registration with referral codes  
✅ Automatic Stripe customer, coupon, and promotion code creation  
✅ Commission calculation via webhooks  
✅ Database tracking of all referral activities  

**What Customer Gets:**
💰 10% discount for first 3 months  
🎁 Easy promotion code application at checkout  

**What Partner Gets:**
💵 20% commission on all referred customer payments  
📊 Tracking of total earnings and referral count  

**System Features:**
🔄 Fully automated commission tracking  
🎯 Real-time webhook processing  
💾 Complete database logging  
🔒 Secure Stripe integration

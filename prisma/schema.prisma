// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id @default(cuid())
  email             String    @unique
  password          String?
  firstName         String?
  lastName          String?
  phoneNumber       String?
  businessName      String?
  businessType      String?
  address           String?
  whatsappNumber    String?
  directChatMessage String?
  role              String    @default("user") // user, admin, customer
  isActive          Boolean   @default(true)
  emailVerified     DateTime?
  image             String?

  // Essential fields
  subscriptionExpirationDate DateTime?
  subscriptionLtv   Float     @default(0.00)
  subscriptionPlan  String?
  subscriptionStartDate DateTime?
  termsAccepted     Boolean   @default(false)
  subscriptionStatus String   @default("active")
  
  // Referral system
  referralCode      String?   @unique

  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relations
  sessions          Session[]
  accounts          Account[]
  orders            Order[]
  payments          Payment[]
  qrCodes           QRCode[]
  supportTickets    SupportTicket[]
  emailVerifications EmailVerification[]
  passwordResets    PasswordReset[]
  
  // Referral relations
  referralsGiven    Referral[] @relation("Referrer")
  referralsReceived Referral[] @relation("ReferredUser")
  
  // Customer relations
  customersManaged  CustomerMaster[] @relation("User")
  customerOf        CustomerMaster[] @relation("Customer")
  customers         Customers[]      // New customers table relation
  appointments      Appointment[]    // Appointments relation
  customerUsers     CustomerUser[]   // Customer-User relations

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Email verification tokens
model EmailVerification {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("email_verifications")
}

// Password reset tokens
model PasswordReset {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("password_resets")
}

model Order {
  id          String   @id @default(cuid())
  userId      String
  amount      Float
  currency    String   @default("USD")
  status      String   @default("pending") // pending, completed, failed, cancelled
  description String?
  metadata    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user    User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  payments Payment[]

  @@map("orders")
}

model Payment {
  id            String   @id @default(cuid())
  userId        String
  orderId       String
  amount        Float
  currency      String   @default("USD")
  status        String   @default("pending") // pending, completed, failed, cancelled
  paymentMethod String?
  transactionId String?
  metadata      Json?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model QRCode {
  id          String   @id @default(cuid())
  userId      String
  name        String
  url         String
  qrData      String
  qrCodeImage String?  // Store the generated QR code image as data URL
  isActive    Boolean  @default(true)
  scanCount   Int      @default(0)
  shareCount  Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("qr_codes")
}

model SupportTicket {
  id          String   @id @default(cuid())
  userId      String
  subject     String
  description String
  status      String   @default("open") // open, in_progress, resolved, closed
  priority    String   @default("medium") // low, medium, high, urgent
  category    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("support_tickets")
}

model Referral {
  id             String   @id @default(cuid())
  status         String   @default("pending") // pending, active, cancelled
  commission     Float    @default(0)
  date           DateTime @default(now())
  
  // Relations
  referrerId     String
  referrer       User     @relation("Referrer", fields: [referrerId], references: [id], onDelete: Cascade)
  
  referredUserId String
  referredUser   User     @relation("ReferredUser", fields: [referredUserId], references: [id], onDelete: Cascade)

  @@map("referrals")
}

// Customer Master table - Business owners can manage their customers
model CustomerMaster {
  id              String   @id @default(cuid())
  userId          String   // User with role 'user' (business owner)
  customerId      String   // User with role 'customer'
  notes           String?  // Business owner's notes about customer
  status          String   @default("active") // active, inactive, blocked
  totalVisits     Int?      @default(0) // How many times customer visited
  lastVisit       DateTime? // Last visit date
  totalSpent      Float?    @default(0.00) // Total amount spent by customer
  
  // Additional fields for customer management
  rating          Float?    @default(0.0) // Customer rating (0.0 to 5.0)
  lastPayment     Float?    @default(0.00) // Last payment amount
  totalPaid       Float?    @default(0.00) // Total amount paid by customer
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  user            User     @relation("User", fields: [userId], references: [id], onDelete: Cascade)
  customer        User     @relation("Customer", fields: [customerId], references: [id], onDelete: Cascade)

  @@unique([userId, customerId]) // One customer per business owner
  @@map("customer_master")
}

// New Customers table - Simple customer information
model Customers {
  id              String   @id @default(cuid())
  
  // Basic fields
  firstName       String?  // First name
  lastName        String?  // Last name
  email           String?  // Customer email address
  
  // Client required fields
  customerPhone   String?  // Customer phone number
  appointmentCount Int     @default(0) // Number of appointments
  customerFullName String? // Full name in Hebrew/Arabic
  selectedServices String? // Selected services
  endDate         DateTime? // Appointment end date
  duration        String?  // Appointment duration
  startDate       DateTime? // Appointment start date
  businessId      Int?     // Business ID
  
  // Image fields
  profileImage    String?  // Profile image URL
  coverImage      String?  // Cover image URL
  documentImage   String?  // Document image URL
  
  // Relations
  userId          String?  // Reference to User table (business owner)
  user            User?    @relation(fields: [userId], references: [id])
  appointments    Appointment[] // Appointments relation
  customerUsers   CustomerUser[] // Customer-User relations
  
  // Timestamps
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("customers")
} 

// Appointment table - Store webhook appointment data
model Appointment {
  id              String   @id @default(cuid())
  
  // Webhook data fields
  source          String?
  endDate         DateTime?
  duration        String?
  startDate       DateTime?
  businessId      Int?
  byCustomer      Boolean  @default(false)
  createDate      DateTime?
  employeeId      Int?
  businessName    String?
  employeeName    String?
  customerPhone   String?
  appointmentCount Int     @default(0)
  customerFullName String?
  selectedServices String?
  
  // Relations
  customerId      String?  // Reference to Customers table
  customer        Customers? @relation(fields: [customerId], references: [id])
  userId          String?  // Reference to User table (business owner)
  user            User?    @relation(fields: [userId], references: [id])
  
  // Timestamps
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("appointments")
}

// Customer_User table - Customer and User relations
model CustomerUser {
  id          String   @id @default(cuid())
  customerId  String   // Reference to Customers table
  userId      String   // Reference to User table
  status      String   @default("active") // active, inactive, blocked
  
  // Relations
  customer    Customers @relation(fields: [customerId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("customer_users")
}

model WebhookLog {
  id          String   @id @default(cuid())
  data        Json     // Store JSON data from webhook body
  createdDate DateTime @default(now())
  status      String   @default("pending") // pending, processed, failed
  type        String   // appointment, payment_checkout
  
  @@map("webhook_logs")
} 